#include <iostream>
#include <conio.h>
#include <string>
#include <vector>
#include<cstdlib>
#include <algorithm>
#include<iomanip>
using namespace std;

static const int userHashSize = 100;

class UserAccountNode; // declared here to avoid circular dependency

class CommitNode
{
	string commitMessage;
	string commitAuthor;

public:
	CommitNode* next;
	CommitNode()
	{
		commitAuthor = "";
		commitMessage = "";
		next = NULL;
	}
	CommitNode(string aut, string mes)
	{
		commitAuthor = aut;
		commitMessage = mes;
		next = NULL;
	}
};
class CommitLinkedList
{
	CommitNode* head;

public:
	CommitLinkedList()
	{
		head = NULL;
	}
	bool isEmpty()
	{
		return head == NULL;
	}
	void addCommit(string commitMessage, string commitAuthor)
	{
		if (isEmpty())
		{
			head = new CommitNode(commitAuthor, commitMessage);
		}
		else
		{
			CommitNode* newHeadNode = new CommitNode(commitAuthor, commitMessage);
			newHeadNode->next = head;
			head = newHeadNode;
		}
	}
};

class FileNode
{
	string fileData;

public:
	string fileName;
	FileNode* next;
	FileNode(string fileName, string fileData)
	{
		next = NULL;
		this->fileData = fileData;
		this->fileName = fileName;
	}
};
class FileLinkedList
{
private:
	FileNode* head;

public:
	FileLinkedList()
	{
		head = NULL;
	}

	bool isEmpty()
	{
		return head == NULL;
	}

	void addFile(string fileName, string fileData)
	{
		FileNode* newFileNode = new FileNode(fileName, fileData);
		if (isEmpty())
		{
			head = newFileNode;
		}
		else
		{
			FileNode* temp = head;
			while (temp->next != NULL)
			{
				temp = temp->next;
			}
			temp->next = newFileNode;
		}
	}
	void deleteFile(string fileName)
	{
		if (isEmpty())
		{
			cout << "\nRepository is Empty";
			return;
		}
		FileNode* current = head;
		FileNode* previous = NULL;

		while (current != NULL && current->fileName != fileName)
		{
			previous = current;
			current = current->next;
		}
		if (current != NULL)                 // if file found
		{
			if (current == head)             // if file is at head node
			{
				head = current->next;
			}
			else
			{
				previous->next = current->next; // edit link
			}

			delete current;
		}
		else
		{                                    // if file does not found
			cout << "\nFile not found!\n";
		}
	}
};

class RepositoryAvlTreeNode
{
public:
	bool isPublic;
	string name;
	bool isDirectory;
	int height;
	CommitLinkedList repoCommits;
	FileLinkedList repoFiles;
	RepositoryAvlTreeNode* left;
	RepositoryAvlTreeNode* right;

	RepositoryAvlTreeNode(string name, bool isDirectory, bool isPub)
	{
		isPublic = isPub;
		this->name = name;
		this->isDirectory = isDirectory;
		height = 1;
		left = NULL;
		right = NULL;
	}
};

class RepositoryAVLTree
{
private:
	RepositoryAvlTreeNode* root;

	int getHeight(RepositoryAvlTreeNode* node)
	{
		if (node == NULL)
			return 0;
		return node->height;
	}

	int getBalanceFactor(RepositoryAvlTreeNode* node)
	{
		if (node == NULL)
			return 0;
		return getHeight(node->left) - getHeight(node->right);
	}

	RepositoryAvlTreeNode* rotateLeft(RepositoryAvlTreeNode* node)
	{
		RepositoryAvlTreeNode* newRoot = node->right;
		RepositoryAvlTreeNode* newRootLeft = newRoot->left;

		newRoot->left = node;
		node->right = newRootLeft;

		node->height = max(getHeight(node->left), getHeight(node->right)) + 1;
		newRoot->height = max(getHeight(newRoot->left), getHeight(newRoot->right)) + 1;

		return newRoot;
	}

	RepositoryAvlTreeNode* rotateRight(RepositoryAvlTreeNode* node)
	{
		RepositoryAvlTreeNode* newRoot = node->left;
		RepositoryAvlTreeNode* newRootRight = newRoot->right;

		newRoot->right = node;
		node->left = newRootRight;

		node->height = max(getHeight(node->left), getHeight(node->right)) + 1;
		newRoot->height = max(getHeight(newRoot->left), getHeight(newRoot->right)) + 1;

		return newRoot;
	}
	RepositoryAvlTreeNode* insert(RepositoryAvlTreeNode* node, string name, bool isDirectory, bool isPublic)
	{
		if (node == NULL)
			return new RepositoryAvlTreeNode(name, isDirectory, isPublic);

		if (name < node->name)
			node->left = insert(node->left, name, isDirectory, isPublic);
		else if (name > node->name)
			node->right = insert(node->right, name, isDirectory, isPublic);
		else
			return node;

		node->height = 1 + max(getHeight(node->left), getHeight(node->right));

		int balanceFactor = getBalanceFactor(node);

		// L L Case
		if (balanceFactor > 1 && name < node->left->name)
			return rotateRight(node);

		// R R Case
		if (balanceFactor < -1 && name > node->right->name)
			return rotateLeft(node);

		// L R Case
		if (balanceFactor > 1 && name > node->left->name)
		{
			node->left = rotateLeft(node->left);
			return rotateRight(node);
		}

		// R L Case
		if (balanceFactor < -1 && name < node->right->name)
		{
			node->right = rotateRight(node->right);
			return rotateLeft(node);
		}

		return node;
	}

	RepositoryAvlTreeNode* search(RepositoryAvlTreeNode* node, string name)
	{
		if (node == NULL || node->name == name)
			return node;

		if (name < node->name)
			return search(node->left, name);

		return search(node->right, name);
	}

	RepositoryAvlTreeNode* findMinNode(RepositoryAvlTreeNode* node)
	{
		RepositoryAvlTreeNode* current = node;
		while (current->left != NULL)
			current = current->left;
		return current;
	}

	RepositoryAvlTreeNode* remove(RepositoryAvlTreeNode* node, string name)
	{
		if (node == NULL)
			return node;

		if (name < node->name)
			node->left = remove(node->left, name);
		else if (name > node->name)
			node->right = remove(node->right, name);
		else
		{
			if (node->left == NULL || node->right == NULL)
			{
				RepositoryAvlTreeNode* temp = node->left ? node->left : node->right;
				if (temp == NULL)
				{
					temp = node;
					node = NULL;
				}
				else {
					node = temp;  // *node = *temp

				}

				delete temp;
			}
			else
			{
				RepositoryAvlTreeNode* temp = findMinNode(node->right);
				node->name = temp->name;
				node->isDirectory = temp->isDirectory;
				node->right = remove(node->right, temp->name);
			}
		}

		if (node == NULL)
			return node;

		node->height = 1 + max(getHeight(node->left), getHeight(node->right));

		int balanceFactor = getBalanceFactor(node);

		// Left Left Case
		if (balanceFactor > 1 && getBalanceFactor(node->left) >= 0)
			return rotateRight(node);

		// Left Right Case
		if (balanceFactor > 1 && getBalanceFactor(node->left) < 0)
		{
			node->left = rotateLeft(node->left);
			return rotateRight(node);
		}

		// Right Right Case
		if (balanceFactor < -1 && getBalanceFactor(node->right) <= 0)
			return rotateLeft(node);

		// Right Left Case
		if (balanceFactor < -1 && getBalanceFactor(node->right) > 0)
		{
			node->right = rotateRight(node->right);
			return rotateLeft(node);
		}

		return node;
	}
	void inOrder(RepositoryAvlTreeNode* node)
	{
		if (node == NULL)
			return;
		inOrder(node->left);
		cout << node->name << " ";
		if (node->isPublic)
		{
			cout << " VISIBILTY --> Public\n";
		}
		else
		{
			cout << " VISIBILTY --> Private\n";
		}
		inOrder(node->right);
	}
	void inOrderOnlyPublic(RepositoryAvlTreeNode* node)
	{
		if (node == NULL)
			return;
		inOrderOnlyPublic(node->left);
		if (node->isPublic)
		{
			cout << node->name << " ";
		}
		inOrderOnlyPublic(node->right);
	}

public:
	RepositoryAVLTree()
	{
		root = NULL;
	}

	void insertRepository(string name, bool isDirectory, bool isPublic)
	{
		root = insert(root, name, isDirectory, isPublic);
	}

	bool searchRepository(string name)
	{
		return search(root, name) != NULL;
	}

	void removeRepository(string name)
	{
		root = remove(root, name);
	}
	void makeCommitInRepo(string repoName, string commitMessage, string commitAuthor)
	{
		RepositoryAvlTreeNode* repoNode = search(root, repoName);
		if (repoNode != NULL)
		{
			repoNode->repoCommits.addCommit(commitMessage, commitAuthor);
			cout << "\nCommit Successful!\n";
		}
		else
		{
			cout << "\nRepository not found!\n";
		}
	}
	void addFileInRepository(string repoName, string fileName, string fileData)
	{
		RepositoryAvlTreeNode* repoNode = search(root, repoName);
		if (repoNode != NULL)
		{
			repoNode->repoFiles.addFile(fileName, fileData);
			cout << "\nFile Added Successfully!\n";
		}
		else
		{
			cout << "\nRepository not found!\n";
		}
	}
	void deleteFileFromRepository(string repoName, string fileName)
	{
		RepositoryAvlTreeNode* repoNode = search(root, repoName);
		if (repoNode != NULL)
		{
			repoNode->repoFiles.deleteFile(fileName);
			cout << "\nFile Deleted Successfully!\n";
		}
		else
		{
			cout << "\nRepository not found!\n";
		}
	}

	void printRepositories()
	{
		inOrder(root);
	}
	void printOnlyPublicRepositories()
	{
		inOrderOnlyPublic(root);
	}
};
class UserAccountNode
{
public:
	string uName;
	string pWord;
	RepositoryAVLTree userRepositories;
	UserAccountNode* next;
	UserAccountNode* followerHead;
	UserAccountNode* followingHead;

	UserAccountNode(string userName, string password)
	{
		this->uName = userName;
		this->pWord = password;
		next = NULL;
		followerHead = NULL;
		followingHead = NULL;
	}

	void displayUserProfile()
	{
		cout << "\n\t\tUser Profile: " << uName << "\n";
		cout << "\nRepositories:\n";
		userRepositories.printRepositories();

		cout << "\nFollowers:\n";
		UserAccountNode* temp = followerHead;
		while (temp != NULL)
		{
			cout << temp->uName << " ";
			temp = temp->next;
		}

		cout << "\nFollowing:\n";
		temp = followingHead;
		while (temp != NULL)
		{
			cout << temp->uName << " ";
			temp = temp->next;
		}
	}

	void followUser(UserAccountNode* userToFollow)
	{
		if (isFollowing(userToFollow))
		{
			cout << "\nYou are already following " << userToFollow->uName << "!\n";
			return;
		}

		UserAccountNode* newFollowingNode = new UserAccountNode(userToFollow->uName, userToFollow->pWord);
		newFollowingNode->next = followingHead;
		followingHead = newFollowingNode;

		UserAccountNode* newFollowerNode = new UserAccountNode(this->uName, this->pWord);
		newFollowerNode->next = userToFollow->followerHead;
		userToFollow->followerHead = newFollowerNode;

		cout << "\nYou are now following " << userToFollow->uName << "!\n";
	}

	void unFollowUser(UserAccountNode* userToUnfollow)
	{
		if (!isFollowing(userToUnfollow))
		{
			cout << "\nYou are not following " << userToUnfollow->uName << "!\n";
			return;
		}

		// Remove from following list
		UserAccountNode* current = followingHead;
		UserAccountNode* previous = NULL;

		while (current != NULL && current->uName != userToUnfollow->uName)
		{
			previous = current;
			current = current->next;
		}

		if (current != NULL)
		{
			if (current == followingHead)
			{
				followingHead = current->next;
			}
			else
			{
				previous->next = current->next;
			}
			delete current;
		}

		// Remove from user's follower list
		current = userToUnfollow->followerHead;
		previous = NULL;

		while (current != NULL && current->uName != this->uName)
		{
			previous = current;
			current = current->next;
		}

		if (current != NULL)
		{
			if (current == userToUnfollow->followerHead)
			{
				userToUnfollow->followerHead = current->next;
			}
			else
			{
				previous->next = current->next;
			}
			delete current;
		}

		cout << "\nYou have unfollowed " << userToUnfollow->uName << "!\n";
	}

	bool isFollowing(UserAccountNode* userToCheck)
	{
		UserAccountNode* temp = followingHead;
		while (temp != NULL)
		{
			if (temp->uName == userToCheck->uName)
			{
				return true;
			}
			temp = temp->next;
		}
		return false;
	}

	void addRepository()
	{
		string repoName;
		bool isDirectory;
		bool isPublic;
		char dirChoice, visChoice;
		cout << "\nEnter Repository Name: ";
		cin >> repoName;
		cout << "\nIs it a directory? (y/n): ";
		cin >> dirChoice;
		isDirectory = (dirChoice == 'y' || dirChoice == 'Y');
		cout << "\nIs it public? (y/n): ";
		cin >> visChoice;
		isPublic = (visChoice == 'y' || visChoice == 'Y');

		userRepositories.insertRepository(repoName, isDirectory, isPublic);
		cout << "\nRepository " << repoName << " added successfully!\n";
	}

	void deleteRepository()
	{
		string repoName;
		cout << "\nEnter Repository Name to delete: ";
		cin >> repoName;
		userRepositories.removeRepository(repoName);
		cout << "\nRepository " << repoName << " deleted successfully!\n";
	}

	void makeCommit()
	{
		string repoName, commitMessage;
		cout << "\nEnter Repository Name to commit in: ";
		cin >> repoName;
		cout << "\nEnter Commit Message: ";
		cin.ignore();
		getline(cin, commitMessage);

		userRepositories.makeCommitInRepo(repoName, commitMessage, uName);
	}

	void addFile()
	{
		string repoName, fileName, fileData;
		cout << "\nEnter Repository Name to add file in: ";
		cin >> repoName;
		cout << "\nEnter File Name: ";
		cin >> fileName;
		cout << "\nEnter File Data: ";
		cin.ignore();
		getline(cin, fileData);

		userRepositories.addFileInRepository(repoName, fileName, fileData);
	}

	void deleteFile()
	{
		string repoName, fileName;
		cout << "\nEnter Repository Name to delete file from: ";
		cin >> repoName;
		cout << "\nEnter File Name: ";
		cin >> fileName;

		userRepositories.deleteFileFromRepository(repoName, fileName);
	}
};

class UserAccount
{
private:
	UserAccountNode* userHash[userHashSize];

	int hashFunction(string userName)
	{
		int sum = 0;
		for (char c : userName)
			sum += c;
		return sum % userHashSize;
	}

public:
	UserAccountNode* currentLoggedInUser;
	bool anyUserLoggedIn;

	UserAccount()
	{
		for (int i = 0; i < userHashSize; i++)
			userHash[i] = NULL;
		currentLoggedInUser = NULL;
		anyUserLoggedIn = false;
	}

	void registerUser()
	{
		string userName, password;
		cout << "\nEnter Username: ";
		cin >> userName;
		cout << "\nEnter Password (min 4 characters): ";
		cin >> password;

		if (password.length() < 4)
		{
			cout << "\nPassword must be at least 4 characters long!\n";
			return;
		}

		int hashIndex = hashFunction(userName);
		UserAccountNode* newNode = new UserAccountNode(userName, password);
		if (userHash[hashIndex] == NULL)
		{
			userHash[hashIndex] = newNode;
		}
		else
		{
			UserAccountNode* temp = userHash[hashIndex];
			while (temp->next != NULL)
				temp = temp->next;
			temp->next = newNode;
		}
		cout << "\nUser registered successfully!\n";
	}

	bool loginUser()
	{
		string userName, password;
		cout << "\nEnter Username: ";
		cin >> userName;
		cout << "\nEnter Password: ";
		cin >> password;

		int hashIndex = hashFunction(userName);
		UserAccountNode* temp = userHash[hashIndex];

		while (temp != NULL)
		{
			if (temp->uName == userName && temp->pWord == password)
			{
				currentLoggedInUser = temp;
				anyUserLoggedIn = true;
				cout << "\nLogin Successful!\n";
				return true;
			}
			temp = temp->next;
		}

		cout << "\nInvalid Username or Password!\n";
		return false;
	}

	void logoutUser()
	{
		if (anyUserLoggedIn)
		{
			currentLoggedInUser = NULL;
			anyUserLoggedIn = false;
			cout << "\nLogout Successful!\n";
		}
		else
		{
			cout << "\nNo user is logged in!\n";
		}
	}

	void followUser(string userNameToFollow)
	{
		if (!anyUserLoggedIn)
		{
			cout << "\nPlease login first!\n";
			return;
		}

		int hashIndex = hashFunction(userNameToFollow);
		UserAccountNode* userToFollow = userHash[hashIndex];

		while (userToFollow != NULL)
		{
			if (userToFollow->uName == userNameToFollow)
			{
				currentLoggedInUser->followUser(userToFollow);
				return;
			}
			userToFollow = userToFollow->next;
		}

		cout << "\nUser not found!\n";
	}

	void unFollowUser(string userNameToUnfollow)
	{
		if (!anyUserLoggedIn)
		{
			cout << "\nPlease login first!\n";
			return;
		}

		int hashIndex = hashFunction(userNameToUnfollow);
		UserAccountNode* userToUnfollow = userHash[hashIndex];

		while (userToUnfollow != NULL)
		{
			if (userToUnfollow->uName == userNameToUnfollow)
			{
				currentLoggedInUser->unFollowUser(userToUnfollow);
				return;
			}
			userToUnfollow = userToUnfollow->next;
		}

		cout << "\nUser not found!\n";
	}

	void viewProfile()
	{
		if (!anyUserLoggedIn)
		{
			cout << "\nPlease login first!\n";
			return;
		}

		currentLoggedInUser->displayUserProfile();
	}

	void addRepo()
	{
		if (!anyUserLoggedIn)
		{
			cout << "\nPlease login first!\n";
			return;
		}
		currentLoggedInUser->addRepository();
	}

	void deleteRepo()
	{
		if (!anyUserLoggedIn)
		{
			cout << "\nPlease login first!\n";
			return;
		}
		currentLoggedInUser->deleteRepository();
	}

	void makeCommitInRepo()
	{
		if (!anyUserLoggedIn)
		{
			cout << "\nPlease login first!\n";
			return;
		}
		currentLoggedInUser->makeCommit();
	}

	void addFileInRepo()
	{
		if (!anyUserLoggedIn)
		{
			cout << "\nPlease login first!\n";
			return;
		}
		currentLoggedInUser->addFile();
	}

	void deleteFileFromRepo()
	{
		if (!anyUserLoggedIn)
		{
			cout << "\nPlease login first!\n";
			return;
		}
		currentLoggedInUser->deleteFile();
	}
};

void mainMenu(UserAccount& account)
{
	int choice;
	do
	{
		
		cout << "\nWelcome to GitHub User Account\n";
		cout << "1. Register\n";
		cout << "2. Login\n";
		cout << "3. Logout\n";
		cout << "4. Follow User\n";
		cout << "5. Unfollow User\n";
		cout << "6. View Profile\n";
		cout << "7. Add Repository\n";
		cout << "8. Delete Repository\n";
		cout << "9. Make a Commit\n";
		cout << "10. Add File to Repository\n";
		cout << "11. Delete File from Repository\n";
		cout << "0. Exit\n";
		cout << "Enter your choice: ";
		cin >> choice;

		switch (choice)
		{
		case 1:
			account.registerUser();
			break;
		case 2:
			account.loginUser();
			break;
		case 3:
			account.logoutUser();
			break;
		case 4:
		{
			string userToFollow;
			cout << "\nEnter Username to Follow: ";
			cin >> userToFollow;
			account.followUser(userToFollow);
		}
		break;
		case 5:
		{
			string userToUnfollow;
			cout << "\nEnter Username to Unfollow: ";
			cin >> userToUnfollow;
			account.unFollowUser(userToUnfollow);
		}
		break;
		case 6:
			account.viewProfile();
			break;
		case 7:
			account.addRepo();
			break;
		case 8:
			account.deleteRepo();
			break;
		case 9:
			account.makeCommitInRepo();
			break;
		case 10:
			account.addFileInRepo();
			break;
		case 11:
			account.deleteFileFromRepo();
			break;
		case 0:
			cout << "\nThank you for using the system!\n";
			break;
		default:
			cout << "\nInvalid choice! Please try again.\n";
			break;
			
		}

	} while (choice != 0);
}

int main()
{
	
	UserAccount account;
	mainMenu(account);
	return 0;
}
